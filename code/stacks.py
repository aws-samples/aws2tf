import boto3
import os
import sys
import globals

from get_aws_resources import aws_s3
import botocore
import common
from timed_interrupt import timed_int



## Enter here:
def get_stacks(stack_name):
    client = boto3.client('cloudformation')
    nested=[]
    print("Level 1 stack nesting for "+ stack_name)
    nested=getstack(stack_name,nested,client)
    

    if nested is not None:
        print("Level 2 stack nesting")
        for nest in nested:
            sn=nest.split("/")[1]
            if sn != stack_name:
                #print("nest= "+sn)
                nested=getstack(sn,nested,client)
                #print("Level 3 stack nesting")


        print("-------------------------------------------")
        nst=len(nested)
        i=1
        with open("stacks.sh", "a") as f6:         
            for nest in nested:
                sn=nest.split("/")[1]
                f6.write("../../aws2tf.py -t stack -i "+sn+"\n")
                print("\n############## Getting resources for stack " + sn + " "+str(i)+" of "+str(nst)+" ##############")
                getstackresources(nest,client)
                i=i+1
            print("Stack "+stack_name+" done")



def getstack(stack_name,nested,client):
    try:
        resp = client.describe_stack_resources(StackName=stack_name)
        response=resp['StackResources']
    
    except botocore.exceptions.ClientError as err:
        print("ValidationError error in getstack")
        print("Stack "+stack_name+" may not exist in region "+globals.region)
        return
    
    
    except Exception as e:
        print(f"{e=}")
        print("-1->unexpected error in getstack")
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return


    for j in response:
        type=j['ResourceType']
        stat=j['ResourceStatus']
        stacki=j['StackId']
        if stacki not in (str(nested)):
            nested=nested+[stacki]
        
        # most added here
        if type == "AWS::CloudFormation::Stack":
            if stat == "CREATE_COMPLETE" or stat=="CREATE_FAILED":
                if stat=="CREATE_FAILED":
                    print("WARNING: Stack "+stack_name+" status is CREATE_FAILED")
                stackr=j['PhysicalResourceId']
                if stackr not in (str(nested)):
                    nested=nested+[stackr]
             
    return nested


def getstackresources(stack_name,client):
    try:
        print("Getting resources for stack: "+stack_name.split("/")[1])
        
        resp = client.describe_stack_resources(StackName=stack_name)
        response=resp['StackResources']
    except Exception as e:
        
        print(f"{e=}")
        print("-1->unexpected error in getstack")
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        print("exit 014")
        timed_int.stop()
        exit()
    ri=0
    rl=len(response)
    
    for j in response:

            f3=open('stack-fetched-implicit.log', 'a')
            f4=open('stack-fetched-explicit.log', 'a')
            f5=open('stack-custom-resources.log', 'a')
            
            type=j['ResourceType']
            stat=j['ResourceStatus']
            if stat=="CREATE_FAILED":
                print("CREATE_FAILED status for "+ type + "skipping .....")
                continue
            pid=j['PhysicalResourceId'].split('/')[-1]   
            parn=j['PhysicalResourceId']
            lrid=j['LogicalResourceId']
            stat=j['ResourceStatus']
            ri=ri+1

            if globals.debug:
                print("type="+type)
            sn=stack_name.split('/')[-2]
            #print("Importing "+ str(ri) + " of "+ str(rl)+ " type="+type)
            print("Importing "+ str(ri) + " of "+ str(rl)+ " type="+type+ " pid="+pid)

            f4.write("Type="+type+ " pid="+pid+ " parn="+parn+"\n")


            if type == "AWS::CloudFormation::Stack": continue
            elif "AWS::CloudFormation::WaitCondition" in type: 
                f3.write("skipping "+type+"\n")



            elif type == "AWS::ApplicationAutoScaling::ScalableTarget": common.call_resource("aws_appautoscaling_target", pid) 
            elif type == "AWS::ApplicationAutoScaling::ScalingPolicy": common.call_resource("aws_appautoscaling_policy", pid) 

            elif type == "AWS::AppMesh::Mesh":  common.call_resource("aws_appmesh_mesh", pid) 
            elif type == "AWS::AppMesh::VirtualGateway": f3.write(type+" "+pid+" fetched as part of parent mesh\n") 
            elif type == "AWS::AppMesh::VirtualNode": f3.write(type+" "+pid+"  fetched as part of parent mesh\n") 
            elif type == "AWS::AppMesh::VirtualRouter": f3.write(type+" "+pid+"  fetched as part of parent mesh\n") 
            elif type == "AWS::AppMesh::VirtualService": f3.write(type+" "+pid+"  fetched as part of parent mesh\n") 

            elif type == "AWS::Athena::NamedQuery":  common.call_resource("aws_athena_named_query", pid) 
            elif type == "AWS::Athena::WorkGroup":  common.call_resource("aws_athena_workgroup", pid) 

            elif type == "AWS::AutoScaling::AutoScalingGroup":  common.call_resource("aws_autoscaling_group", pid) 
            elif type == "AWS::AutoScaling::LaunchConfiguration":  common.call_resource("aws_launch_configuration", pid) 
            elif type == "AWS::AutoScaling::LifecycleHook": common.call_resource("aws_autoscaling_lifecycle_hook", pid)

            elif type == "AWS::CDK::Metadata": f3.write(type+" "+pid+" skipped only relevant to CDK .. \n") 

            elif type == "AWS::Cloud9::EnvironmentEC2":  common.call_resource("aws_cloud9_environment_ec2", pid) 

            elif type == "AWS::CloudWatch::Alarm": common.call_resource("aws_cloudwatch_metric_alarm", parn) 

            elif type == "AWS::EC2::Instance":              common.call_resource("aws_instance", pid) 
            elif type == "AWS::EC2::KeyPair":               common.call_resource("aws_key_pair", pid) 
            elif type == "AWS::EC2::DHCPOptions":           common.call_resource("aws_vpc_dhcp_options", pid) 
            elif type == "AWS::EC2::EIP":                   f3.write(type+" "+pid+" fetched as part of other resources..\n")
            elif type == "AWS::EC2::NatGateway":            common.call_resource("aws_nat_gateway", pid) 
            elif type == "AWS::EC2::NetworkAcl":            common.call_resource("aws_network_acl", pid) 
            elif type == "AWS::EC2::NetworkAclEntry":       f3.write(type+" "+pid+" fetched as part of NetworkAcl..\n")
            elif type == "AWS::EC2::SubnetNetworkAclAssociation": f3.write(type +" fetched as part of NetworkAcl..\n")
            elif type == "AWS::EC2::InternetGateway":       common.call_resource("aws_internet_gateway", pid) 
            elif type == "AWS::EC2::LaunchTemplate":        common.call_resource("aws_launch_template", pid) 
            elif type == "AWS::EC2::SecurityGroup":         common.call_resource("aws_security_group", pid) 
            elif type == "AWS::EC2::SecurityGroupIngress":  f3.write(type+" fetched as part of SecurityGroup..\n")
            elif type == "AWS::EC2::SecurityGroupEgress":   f3.write(type+" fetched as part of SecurityGroup..\n")

            elif type == "AWS::EC2::VPCEndpoint":           common.call_resource("aws_vpc_endpoint", pid) 
            elif type == "AWS::EC2::VPC":                   common.call_resource("aws_vpc", pid) 
            elif type == "AWS::EC2::Subnet":                common.call_resource("aws_subnet", pid) 
            elif type == "AWS::EC2::RouteTable":            common.call_resource("aws_route_table", pid) 
            elif type == "AWS::EC2::Route":                     f3.write(type+" "+pid+" fetched as part of RouteTable...\n")
            elif type == "AWS::EC2::SubnetRouteTableAssociation": f3.write(type+" "+pid+" fetched as part of Subnet...\n")
            elif type == "AWS::EC2::VPCGatewayAttachment":      f3.write(type+" "+pid+" fetched as part of IGW...\n")
            elif type == "AWS::EC2::VPCEndpointService":        common.call_resource("aws_vpc_endpoint_service", pid) 
            elif type == "AWS::EC2::FlowLog":                   common.call_resource("aws_flow_log", pid) 

            elif type == "AWS::ECR::Repository":                common.call_resource("aws_ecr_repository", pid) 

            elif type == "AWS::ECS::Cluster":  common.call_resource("aws_ecs_cluster", pid) 
            elif type == "AWS::ECS::Service":  common.call_resource("aws_ecs_service", parn) 
            elif type == "AWS::ECS::TaskDefinition":  common.call_resource("aws_ecs_task_definition", pid) 

            elif type == "AWS::EFS::FileSystem":  common.call_resource("aws_efs_file_system", pid) 
            elif type == "AWS::EFS::MountTarget": f3.write(type+" "+pid+" attached as part of EFS::FileSystem ..\n") 
            elif type == "AWS::EFS::AccessPoint": f3.write(type+" "+pid+" attached as part of EFS::FileSystem ..\n") 

            elif type == "AWS::EKS::Cluster":  common.call_resource("aws_eks_cluster", pid) 
            elif type == "AWS::EKS::Nodegroup": f3.write(type+" "+pid+"  Should be fetched via the EKS Cluster Resource\n") 

            elif type == "AWS::ElasticLoadBalancingV2::LoadBalancer":  common.call_resource("aws_lb", parn) 
            elif type == "AWS::ElasticLoadBalancingV2::Listener":  common.call_resource("aws_lb_listener", parn) 
            elif type == "AWS::ElasticLoadBalancingV2::ListenerRule":  common.call_resource("aws_lb_listener_rule", parn) 
            elif type == "AWS::ElasticLoadBalancingV2::TargetGroup":  common.call_resource("aws_lb_target_group", parn) 

            elif type == "AWS::EMR::Cluster":  common.call_resource("aws_emr_cluster", pid) 
            elif type == "AWS::EMR::SecurityConfiguration": common.call_resource("aws_emr_security_configuration", pid) 

            elif type == "AWS::Events::EventBus": common.call_resource("aws_cloudwatch_event_bus", pid) 
            elif type == "AWS::Events::Rule": common.call_resource("aws_cloudwatch_event_rule", pid)

            elif type == "AWS::Glue::Connection": common.call_resource("aws_glue_connection", pid)
            elif type == "AWS::Glue::Crawler": common.call_resource("aws_glue_crawler", pid)
            elif type == "AWS::Glue::Database": common.call_resource("aws_glue_catalog_database", pid)
            elif type == "AWS::Glue::Job": common.call_resource("aws_glue_job", pid) 
            elif type == "AWS::Glue::Table": f3.write(type+" "+pid+" fetched as part of AWS::Glue::Database ...\n")
            elif type == "AWS::Glue::Trigger": common.call_resource("aws_glue_trigger", pid)
            elif type == "AWS::Glue::Partition": common.call_resource("aws_glue_partition", pid) 
            
            elif type == "AWS::IAM::Role":              common.call_resource("aws_iam_role", pid)
            elif type == "AWS::IAM::ManagedPolicy":  common.call_resource("aws_iam_policy", parn) 
            elif type == "AWS::IAM::InstanceProfile":  common.call_resource("aws_iam_instance_profile", pid) 
            elif type == "AWS::IAM::User":  common.call_resource("aws_iam_user", pid) 
            elif type == "AWS::IAM::AccessKey": f3.write(type+" "+pid+" Should be fetched via IAM Users etc\n")  
            elif type == "AWS::IAM::ServiceLinkedRole":  common.call_resource("aws_iam_service_linked_role", pid) 
            elif type == "AWS::IAM::Group":  common.call_resource("aws_iam_group", pid) 
            #elif type == "AWS::IAM::Policy)  echo "../../scripts/get-iam-policies.sh $parn" >> commands.sh ;;
            elif type == "AWS::IAM::Policy": f3.write(type+" "+pid+" Should be fetched via Roles etc\n") 

            elif type == "AWS::KinesisFirehose::DeliveryStream":  common.call_resource("aws_kinesis_firehose_delivery_stream", pid) 
            elif type == "AWS::Kinesis::Stream":  common.call_resource("aws_kinesis_stream", pid)
   
            elif type == "AWS::KMS::Key":  common.call_resource("aws_kms_key", pid) 
            elif type == "AWS::KMS::Alias": common.call_resource("aws_kms_alias", pid) 

            elif type == "AWS::LakeFormation::DataLakeSettings":  common.call_resource("aws_lakeformation_data_lake_settings", pid) 
            elif type == "AWS::LakeFormation::Resource": common.call_resource("aws_lakeformation_resource", pid) 
            # pid pard can be json structures for this one
            elif type == "AWS::LakeFormation::Permissions":  common.call_resource("aws_lakeformation_permissions", pid) 
            elif type == "AWS::LakeFormation::PrincipalPermissions":  common.call_resource("aws_lakeformation_permissions", lrid) 

            elif type == "AWS::Lambda::Function":  common.call_resource("aws_lambda_function", pid) 
            elif type == "AWS::Lambda::LayerVersion":  common.call_resource("aws_lambda_layer_version", pid) 
            elif type == "AWS::Lambda::Permission": f3.write(type+" "+pid+"  as part of function..\n")          # fetched as part of function
            elif type == "AWS::Lambda::EventInvokeConfig": f3.write(type+" "+pid+"  as part of function..\n")   # fetched as part of function
            elif type == "AWS::Lambda::EventSourceMapping": f3.write(type+" "+pid+"  as part of function..\n")  # fetched as part of function

            elif type == "AWS::Logs::LogGroup": common.call_resource("aws_cloudwatch_log_group", pid) 
            
            ##### terraform crash !
            elif type == "AWS::RedshiftServerless::Namespace": common.call_resource("aws_redshiftserverless_namespace", pid)
            ##### terraform crash !

            elif type == "AWS::RedshiftServerless::Workgroup": common.call_resource("aws_redshiftserverless_workgroup", pid)

            elif type == "AWS::Redshift::Cluster":  common.call_resource("aws_redshift_cluster", pid) 
            elif type == "AWS::Redshift::ClusterParameterGroup":  common.call_resource("aws_redshift_parameter_group", pid)
            elif type == "AWS::Redshift::ClusterSubnetGroup":  common.call_resource("aws_redshift_subnet_group", pid) 

            elif type == "AWS::RDS::DBCluster": common.call_resource("aws_rds_cluster", pid)
            elif type == "AWS::RDS::DBClusterParameterGroup": common.call_resource("aws_rds_cluster_parameter_group", pid)
            elif type == "AWS::RDS::DBInstance": common.call_resource("aws_db_instance", pid)   
            elif type == "AWS::RDS::DBParameterGroup":  common.call_resource("aws_db_parameter_group", pid) 
            elif type == "AWS::RDS::DBSubnetGroup": common.call_resource("aws_db_subnet_group", pid) 
            elif type == "AWS::RDS::EventSubscription":  common.call_resource("aws_db_event_subscription", pid) 


            elif type == "AWS::ServiceCatalog::PortfolioPrincipalAssociation": 
                tarn=parn.split('|')[0]
                common.call_resource("aws_null", tarn)
                

            elif type == "AWS::S3::Bucket":  common.call_resource("aws_s3_bucket", pid)
            elif type == "AWS::S3::BucketPolicy":  f3.write(type +" fetched as part of bucket...\n")
            elif type == "AWS::S3::AccessGrant": common.call_resource("aws_s3control_access_grant", pid)
            elif type == "AWS::S3::AccessGrantsInstance": common.call_resource("aws_s3control_access_grants_instance", pid)
            elif type == "AWS::S3::AccessGrantsLocation": common.call_resource("aws_s3control_access_grants_location", pid)
            elif type == "AWS::S3::AccessPoint": common.call_resource("aws_s3_access_point", pid)
            elif type == "AWS::S3::MultiRegionAccessPoint": common.call_resource("aws_s3control_multi_region_access_point", pid)
            elif type == "AWS::S3::MultiRegionAccessPointPolicy": common.call_resource("aws_s3control_multi_region_access_point_policy", pid)
            elif type == "AWS::S3::StorageLens": common.call_resource("aws_s3control_storage_lens_configuration", pid)
            elif type == "AWS::S3::StorageLensGroup": common.call_resource("aws_null", type+" "+pid)

            elif type == "AWS::SageMaker::AppImageConfig":  common.call_resource("aws_sagemaker_app_image_config", pid) 
            elif type == "AWS::SageMaker::Domain":  common.call_resource("aws_sagemaker_domain", parn) 
            elif type == "AWS::SageMaker::Image":  common.call_resource("aws_sagemaker_image", pid) 
            elif type == "AWS::SageMaker::ImageVersion": f3.write(type+" "+pid+"  as part of SageMaker Image..\n")
            elif type == "AWS::SageMaker::NotebookInstance":  common.call_resource("aws_sagemaker_notebook_instance", pid) 
            elif type == "AWS::SageMaker::UserProfile": common.call_resource("aws_sagemaker_user_profile", pid)

            elif type == "AWS::SNS::Subscription":  common.call_resource("aws_sns_topic_subscription", parn) 
            elif type == "AWS::SNS::Topic":  common.call_resource("aws_sns_topic", parn) 
            elif type == "AWS::SNS::TopicPolicy":  common.call_resource("aws_sns_topic_policy", parn) 
            elif type == "AWS::SQS::Queue":  common.call_resource("aws_sqs_queue", parn) 
            elif type == "AWS::SQS::QueuePolicy": f3.write(type+" "+pid+"  as part of SQS Queue ..\n") 

            elif type == "AWS::SSM::Parameter":  common.call_resource("aws_ssm_parameter", pid) 
            elif type == "AWS::ServiceDiscovery::PrivateDnsNamespace": common.call_resource("aws_service_discovery_private_dns_namespace", pid)
            elif type == "AWS::StepFunctions::StateMachine":  common.call_resource("aws_sfn_state_machine", pid) 
            elif type == "AWS::SecretsManager::SecretTargetAttachment": f3.write(type+" "+pid+" implicit elsewhere ..\n") 
            elif type == "AWS::SecretsManager::Secret": common.call_resource("aws_secretsmanager_secret", parn) 
            elif type == "AWS::ServiceDiscovery::Service": common.call_resource(" aws_service_discovery_service", pid) 
            elif type == "AWS::ACMPCA::CertificateAuthority": common.call_resource("aws_acmpca_certificate_authority", pid)
            elif type == "AWS::ACMPCA::CertificateAuthorityActivation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ACMPCA::Permission": common.call_resource("aws_acmpca_permission", pid)
            elif type == "AWS::APS::RuleGroupsNamespace": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::APS::Workspace": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ARCZonalShift::ZonalAutoshiftConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AccessAnalyzer::Analyzer": common.call_resource("aws_accessanalyzer_analyzer", pid)
            elif type == "AWS::AmazonMQ::Broker": common.call_resource("aws_mq_broker", pid)
            elif type == "AWS::AmazonMQ::Configuration": common.call_resource("aws_mq_configuration", pid)
            elif type == "AWS::AmazonMQ::ConfigurationAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Amplify::App": common.call_resource("aws_amplify_app", pid)
            elif type == "AWS::Amplify::Branch": f3.write(type+" "+pid+" as part of Amplify App ..\n")
            elif type == "AWS::Amplify::Domain": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AmplifyUIBuilder::Component": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AmplifyUIBuilder::Form": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AmplifyUIBuilder::Theme": common.call_resource("aws_null", type+" "+pid)

            elif type == "AWS::ApiGateway::Account": f3.write("Error: **Terraform does not support import of " +type + " skipped**\n")
            elif type == "AWS::ApiGateway::ApiKey": common.call_resource("aws_api_gateway_api_key", pid)
            elif type == "AWS::ApiGateway::Authorizer": f3.write(type+" "+pid+"  as part of RestApi..\n")
            elif type == "AWS::ApiGateway::BasePathMapping": common.call_resource("aws_api_gateway_base_path_mapping", pid)
            elif type == "AWS::ApiGateway::ClientCertificate": common.call_resource("aws_api_gateway_client_certificate", pid)
            elif type == "AWS::ApiGateway::Deployment": f3.write(type+" "+pid+" as part of RestApi..\n")
            elif type == "AWS::ApiGateway::DocumentationPart": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ApiGateway::DocumentationVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ApiGateway::DomainName": common.call_resource("aws_api_gateway_domain_name", pid)
            elif type == "AWS::ApiGateway::GatewayResponse": common.call_resource("aws_api_gateway_gateway_response",pid)
            elif type == "AWS::ApiGateway::Method": f3.write(type+" "+pid+" as part of RestApi..\n") 
            elif type == "AWS::ApiGateway::Model": common.call_resource("aws_api_gateway_model", pid)
            elif type == "AWS::ApiGateway::RequestValidator": common.call_resource("aws_api_gateway_request_validator", pid)
            elif type == "AWS::ApiGateway::Resource": f3.write(type+" "+pid+"  as part of RestApi..\n") 
            elif type == "AWS::ApiGateway::Stage": f3.write(type+" "+pid+"  as part of RestApi..\n")
            elif type == "AWS::ApiGateway::UsagePlan": common.call_resource("aws_api_gateway_usage_plan", pid)
            elif type == "AWS::ApiGateway::UsagePlanKey": common.call_resource("aws_api_gateway_usage_plan_key", pid)
            elif type == "AWS::ApiGateway::VpcLink": common.call_resource("aws_api_gateway_vpc_link", pid)
            elif type == "AWS::ApiGateway::RestApi": common.call_resource("aws_api_gateway_rest_api", pid) 

            elif type == "AWS::ApiGatewayV2::Api": common.call_resource("aws_apigatewayv2_api", pid)
            elif type == "AWS::ApiGatewayV2::ApiGatewayManagedOverrides": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ApiGatewayV2::ApiMapping": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::Authorizer": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::Deployment": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::DomainName": common.call_resource("aws_apigatewayv2_domain_name", pid)
            elif type == "AWS::ApiGatewayV2::Integration": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::IntegrationResponse": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::Model": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::Route": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::RouteResponse": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::Stage": f3.write(type+" "+pid+" fetched as part of ApiGatewayV2 Api..\n")
            elif type == "AWS::ApiGatewayV2::VpcLink": common.call_resource("aws_apigatewayv2_vpc_link", pid)

            elif type == "AWS::AppConfig::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppConfig::ConfigurationProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppConfig::Deployment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppConfig::DeploymentStrategy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppConfig::Environment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppConfig::Extension": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppConfig::ExtensionAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppConfig::HostedConfigurationVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppFlow::Connector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppFlow::ConnectorProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppFlow::Flow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppIntegrations::DataIntegration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppIntegrations::EventIntegration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppMesh::GatewayRoute": common.call_resource("aws_appmesh_gateway_route", pid)
            elif type == "AWS::AppMesh::Route": common.call_resource("aws_appmesh_route", pid)
            elif type == "AWS::AppRunner::AutoScalingConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppRunner::ObservabilityConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppRunner::Service": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppRunner::VpcConnector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppRunner::VpcIngressConnection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::AppBlock": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::AppBlockBuilder": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::ApplicationEntitlementAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::ApplicationFleetAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::DirectoryConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::Entitlement": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::Fleet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::ImageBuilder": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::Stack": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::StackFleetAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::StackUserAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppStream::User": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::ApiCache": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::ApiKey": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::DataSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::DomainName": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::DomainNameApiAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::FunctionConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::GraphQLApi": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::GraphQLSchema": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::Resolver": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AppSync::SourceApiAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ApplicationInsights::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Athena::CapacityReservation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Athena::DataCatalog": common.call_resource("aws_athena_data_catalog", pid)
            elif type == "AWS::Athena::PreparedStatement": common.call_resource("aws_athena_prepared_statement", pid)
            elif type == "AWS::AuditManager::Assessment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AutoScaling::ScalingPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AutoScaling::ScheduledAction": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AutoScaling::WarmPool": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::AutoScalingPlans::ScalingPlan": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::B2BI::Capability": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::B2BI::Partnership": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::B2BI::Profile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::B2BI::Transformer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Backup::BackupPlan": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Backup::BackupSelection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Backup::BackupVault": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Backup::Framework": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Backup::ReportPlan": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Backup::RestoreTestingPlan": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Backup::RestoreTestingSelection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::BackupGateway::Hypervisor": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Batch::ComputeEnvironment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Batch::JobDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Batch::JobQueue": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Batch::SchedulingPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Budgets::Budget": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Budgets::BudgetsAction": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CE::AnomalyMonitor": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CE::AnomalySubscription": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CE::CostCategory": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cassandra::Keyspace": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cassandra::Table": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CertificateManager::Account": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CertificateManager::Certificate": common.call_resource("aws_acm_certificate", parn)
            elif type == "AWS::Chatbot::MicrosoftTeamsChannelConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Chatbot::SlackChannelConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CleanRooms::AnalysisTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CleanRooms::Collaboration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CleanRooms::ConfiguredTable": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CleanRooms::ConfiguredTableAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CleanRooms::Membership": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::CustomResource": f5.write("Type="+type+ " pid="+pid+ " parn="+parn+"\n")
            elif type == "AWS::CloudFormation::HookDefaultVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::HookTypeConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::HookVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::Macro": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::ModuleDefaultVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::ModuleVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::PublicTypeVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::Publisher": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::ResourceDefaultVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::ResourceVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::StackSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::TypeActivation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFormation::WaitConditionHandle": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::CachePolicy": common.call_resource("aws_cloudfront_cache_policy", pid)
            elif type == "AWS::CloudFront::CloudFrontOriginAccessIdentity": common.call_resource("aws_cloudfront_origin_access_identity", pid)
            elif type == "AWS::CloudFront::ContinuousDeploymentPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::Distribution": common.call_resource("aws_cloudfront_distribution", parn)
            elif type == "AWS::CloudFront::Function": common.call_resource("aws_cloudfront_function", pid)
            elif type == "AWS::CloudFront::KeyGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::KeyValueStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::MonitoringSubscription": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::OriginAccessControl": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::OriginRequestPolicy": common.call_resource("aws_cloudfront_origin_request_policy", pid)
            elif type == "AWS::CloudFront::PublicKey": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::RealtimeLogConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::ResponseHeadersPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudFront::StreamingDistribution": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudTrail::Channel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudTrail::EventDataStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudTrail::ResourcePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudTrail::Trail": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudWatch::AnomalyDetector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudWatch::CompositeAlarm": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudWatch::Dashboard": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudWatch::InsightRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CloudWatch::MetricStream": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeArtifact::Domain": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeArtifact::Repository": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeBuild::Project": common.call_resource("aws_codebuild_project", pid)
            elif type == "AWS::CodeBuild::ReportGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeBuild::SourceCredential": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeCommit::Repository": common.call_resource("aws_codecommit_repository",pid)
            elif type == "AWS::CodeDeploy::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeDeploy::DeploymentConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeDeploy::DeploymentGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeGuruProfiler::ProfilingGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeGuruReviewer::RepositoryAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodePipeline::CustomActionType": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodePipeline::Pipeline": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodePipeline::Webhook": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeStar::GitHubRepository": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeStarConnections::Connection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeStarConnections::RepositoryLink": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeStarConnections::SyncConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CodeStarNotifications::NotificationRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::IdentityPool": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::IdentityPoolPrincipalTag": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::IdentityPoolRoleAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::LogDeliveryConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::UserPool": common.call_resource("aws_cognito_user_pool",pid)
            elif type == "AWS::Cognito::UserPoolClient": f3.write(type+" "+pid+" fetched as part of Cognito UserPool\n")
            elif type == "AWS::Cognito::UserPoolDomain": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::UserPoolGroup": f3.write(type+" "+pid+" fetched as part of Cognito UserPool\n")
            elif type == "AWS::Cognito::UserPoolIdentityProvider": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::UserPoolResourceServer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::UserPoolRiskConfigurationAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::UserPoolUICustomizationAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::UserPoolUser": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Cognito::UserPoolUserToGroupAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Comprehend::DocumentClassifier": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Comprehend::Flywheel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Config::AggregationAuthorization": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Config::ConfigRule": common.call_resource("aws_config_config_rule", pid)
            elif type == "AWS::Config::ConfigurationAggregator": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Config::ConfigurationRecorder": common.call_resource("aws_config_configuration_recorder", pid)
            elif type == "AWS::Config::ConformancePack": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Config::DeliveryChannel": common.call_resource("aws_config_delivery_channel", pid)
            elif type == "AWS::Config::OrganizationConfigRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Config::OrganizationConformancePack": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Config::RemediationConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Config::StoredQuery": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::ApprovedOrigin": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::ContactFlow": f3.write(type+" "+pid+" as part of Connect Instance..\n") 
            elif type == "AWS::Connect::ContactFlowModule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::EvaluationForm": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::HoursOfOperation": f3.write(type+" "+pid+" as part of Connect Instance..\n") 
            elif type == "AWS::Connect::Instance": common.call_resource("aws_connect_instance", pid)
            elif type == "AWS::Connect::InstanceStorageConfig": f3.write(type+" "+pid+" as part of Connect Instance..\n") 
            elif type == "AWS::Connect::IntegrationAssociation": f3.write(type+" "+pid+" as part of Connect Instance..\n")
            elif type == "AWS::Connect::PhoneNumber": f3.write(type+" "+pid+" as part of Connect Instance..\n") 
            elif type == "AWS::Connect::PredefinedAttribute": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::Prompt": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::Queue": f3.write(type+" "+pid+" as part of Connect Instance..\n") 
            elif type == "AWS::Connect::QuickConnect": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::RoutingProfile": f3.write(type+" "+pid+" as part of Connect Instance..\n") 
            elif type == "AWS::Connect::Rule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::SecurityKey": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::SecurityProfile": f3.write(type+" "+pid+" as part of Connect Instance..\n") 
            elif type == "AWS::Connect::TaskTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::TrafficDistributionGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::User": f3.write(type+" "+pid+" as part of Connect Instance..\n") 
            elif type == "AWS::Connect::UserHierarchyGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::View": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Connect::ViewVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ConnectCampaigns::Campaign": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ControlTower::EnabledControl": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ControlTower::LandingZone": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CustomerProfiles::CalculatedAttributeDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CustomerProfiles::Domain": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CustomerProfiles::EventStream": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CustomerProfiles::Integration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::CustomerProfiles::ObjectType": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DAX::Cluster": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DAX::ParameterGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DAX::SubnetGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DLM::LifecyclePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DMS::Certificate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DMS::DataProvider": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DMS::Endpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DMS::EventSubscription": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DMS::InstanceProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DMS::MigrationProject": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DMS::ReplicationConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DMS::ReplicationInstance": common.call_resource("aws_dms_replication_instance", pid)
            elif type == "AWS::DMS::ReplicationSubnetGroup": common.call_resource("aws_dms_replication_subnet_group", pid)
            elif type == "AWS::DMS::ReplicationTask": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataBrew::Dataset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataBrew::Job": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataBrew::Project": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataBrew::Recipe": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataBrew::Ruleset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataBrew::Schedule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataPipeline::Pipeline": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::Agent": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationAzureBlob": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationEFS": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationFSxLustre": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationFSxONTAP": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationFSxOpenZFS": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationFSxWindows": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationHDFS": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationNFS": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationObjectStorage": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationS3": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::LocationSMB": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::StorageSystem": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataSync::Task": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DataZone::DataSource": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::DataZone::Domain": common.call_resource("aws_datazone_domain", pid)
            elif type == "AWS::DataZone::Environment": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::DataZone::EnvironmentActions": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::DataZone::EnvironmentBlueprintConfiguration": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::DataZone::EnvironmentProfile": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::DataZone::Project": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::DataZone::ProjectMembership": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::DataZone::SubscriptionTarget": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::DataZone::UserProfile": f3.write(type+" "+pid+" Should be fetched via DataZone Domain\n")
            elif type == "AWS::Detective::Graph": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Detective::MemberInvitation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Detective::OrganizationAdmin": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DevOpsGuru::LogAnomalyDetectionIntegration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DevOpsGuru::NotificationChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DevOpsGuru::ResourceCollection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DeviceFarm::DevicePool": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DeviceFarm::InstanceProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DeviceFarm::NetworkProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DeviceFarm::Project": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DeviceFarm::TestGridProject": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DeviceFarm::VPCEConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DirectoryService::MicrosoftAD": common.call_resource("aws_directory_service_directory", pid)
            elif type == "AWS::DirectoryService::SimpleAD": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DocDB::DBCluster": common.call_resource("aws_docdb_cluster", pid)
            elif type == "AWS::DocDB::DBClusterParameterGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DocDB::DBInstance": common.call_resource("aws_docdb_cluster_instance", pid)
            elif type == "AWS::DocDB::DBSubnetGroup": common.call_resource("aws_docdb_subnet_group", pid)
            elif type == "AWS::DocDB::EventSubscription": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DocDBElastic::Cluster": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DynamoDB::GlobalTable": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::DynamoDB::Table": common.call_resource("aws_dynamodb_table",pid)
            elif type == "AWS::EC2::CapacityReservation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::CapacityReservationFleet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::CarrierGateway": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::ClientVpnAuthorizationRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::ClientVpnEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::ClientVpnRoute": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::ClientVpnTargetNetworkAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::CustomerGateway": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::EC2Fleet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::EIPAssociation": common.call_resource("aws_eip_association", pid)
            elif type == "AWS::EC2::EgressOnlyInternetGateway": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::EnclaveCertificateIamRoleAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::GatewayRouteTableAssociation": f3.write(type+" "+pid+" Should be fetched via Route Table\n")
            elif type == "AWS::EC2::Host": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::IPAM": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::IPAMAllocation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::IPAMPool": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::IPAMPoolCidr": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::IPAMResourceDiscovery": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::IPAMResourceDiscoveryAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::IPAMScope": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::InstanceConnectEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::LocalGatewayRoute": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::LocalGatewayRouteTable": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::LocalGatewayRouteTableVPCAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::NetworkInsightsAccessScope": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::NetworkInsightsAccessScopeAnalysis": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::NetworkInsightsAnalysis": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::NetworkInsightsPath": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::NetworkInterface": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::NetworkInterfaceAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::NetworkInterfacePermission": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::NetworkPerformanceMetricSubscription": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::PlacementGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::PrefixList": common.call_resource("aws_null", type+" "+pid) 
            elif type == "AWS::EC2::SnapshotBlockPublicAccess": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::SpotFleet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::SubnetCidrBlock": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TrafficMirrorFilter": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TrafficMirrorFilterRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TrafficMirrorSession": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TrafficMirrorTarget": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGateway": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayConnect": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayMulticastDomain": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayMulticastDomainAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayMulticastGroupMember": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayMulticastGroupSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayPeeringAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayRoute": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayRouteTable": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayRouteTableAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayRouteTablePropagation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::TransitGatewayVpcAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VPCCidrBlock": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VPCDHCPOptionsAssociation": common.call_resource("aws_vpc_dhcp_options_association",pid)
            elif type == "AWS::EC2::VPCEndpointConnectionNotification": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VPCEndpointServicePermissions": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VPCPeeringConnection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VPNConnection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VPNConnectionRoute": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VPNGateway": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VPNGatewayRoutePropagation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VerifiedAccessEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VerifiedAccessGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VerifiedAccessInstance": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::VerifiedAccessTrustProvider": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EC2::Volume": common.call_resource("aws_ebs_volume", pid)
            elif type == "AWS::EC2::VolumeAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ECR::PullThroughCacheRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ECR::RegistryPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ECR::ReplicationConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ECS::CapacityProvider": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ECS::ClusterCapacityProviderAssociations": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ECS::PrimaryTaskSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ECS::TaskSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EKS::AccessEntry": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EKS::Addon": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EKS::FargateProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EKS::IdentityProviderConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EKS::PodIdentityAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EMR::InstanceFleetConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EMR::InstanceGroupConfig": f3.write(type+" "+pid+" fetched as part of aws_emr_cluster..\n")
            elif type == "AWS::EMR::Step": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EMR::Studio": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EMR::StudioSessionMapping": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EMR::WALWorkspace": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EMRContainers::VirtualCluster": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EMRServerless::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::CacheCluster": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::GlobalReplicationGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::ParameterGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::ReplicationGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::SecurityGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::SecurityGroupIngress": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::ServerlessCache": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::SubnetGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::User": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElastiCache::UserGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElasticBeanstalk::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElasticBeanstalk::ApplicationVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElasticBeanstalk::ConfigurationTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElasticBeanstalk::Environment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElasticLoadBalancing::LoadBalancer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElasticLoadBalancingV2::ListenerCertificate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElasticLoadBalancingV2::TrustStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ElasticLoadBalancingV2::TrustStoreRevocation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Elasticsearch::Domain": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EntityResolution::IdMappingWorkflow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EntityResolution::MatchingWorkflow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EntityResolution::SchemaMapping": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EventSchemas::Discoverer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EventSchemas::Registry": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EventSchemas::RegistryPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::EventSchemas::Schema": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Events::ApiDestination": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Events::Archive": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Events::Connection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Events::Endpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Events::EventBusPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Evidently::Experiment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Evidently::Feature": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Evidently::Launch": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Evidently::Project": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Evidently::Segment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FIS::ExperimentTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FIS::TargetAccountConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FMS::NotificationChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FMS::Policy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FMS::ResourceSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FSx::DataRepositoryAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FSx::FileSystem": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FSx::Snapshot": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FSx::StorageVirtualMachine": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FSx::Volume": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FinSpace::Environment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Forecast::Dataset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Forecast::DatasetGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FraudDetector::Detector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FraudDetector::EntityType": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FraudDetector::EventType": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FraudDetector::Label": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FraudDetector::List": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FraudDetector::Outcome": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::FraudDetector::Variable": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::Alias": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::Build": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::Fleet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::GameServerGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::GameSessionQueue": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::Location": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::MatchmakingConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::MatchmakingRuleSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GameLift::Script": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GlobalAccelerator::Accelerator": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GlobalAccelerator::EndpointGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GlobalAccelerator::Listener": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::Classifier": common.call_resource("aws_glue_classifier", pid)
            elif type == "AWS::Glue::CustomEntityType": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::DataCatalogEncryptionSettings": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::DataQualityRuleset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::DevEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::MLTransform": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::Registry": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::Schema": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::SchemaVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::SchemaVersionMetadata": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::SecurityConfiguration": common.call_resource("aws_glue_security_configuration",pid)
            elif type == "AWS::Glue::Trigger": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Glue::Workflow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Grafana::Workspace": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::ConnectorDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::ConnectorDefinitionVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::CoreDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::CoreDefinitionVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::DeviceDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::DeviceDefinitionVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::FunctionDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::FunctionDefinitionVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::Group": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::GroupVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::LoggerDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::LoggerDefinitionVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::ResourceDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::ResourceDefinitionVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::SubscriptionDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Greengrass::SubscriptionDefinitionVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GreengrassV2::ComponentVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GreengrassV2::Deployment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GroundStation::Config": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GroundStation::DataflowEndpointGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GroundStation::MissionProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GuardDuty::Detector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GuardDuty::Filter": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GuardDuty::IPSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GuardDuty::Master": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GuardDuty::Member": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::GuardDuty::ThreatIntelSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::HealthImaging::Datastore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::HealthLake::FHIRDatastore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IAM::GroupPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IAM::OIDCProvider": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IAM::RolePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IAM::SAMLProvider": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IAM::ServerCertificate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IAM::UserPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IAM::UserToGroupAddition": f3.write(type +" fetched as part of IAM Group...\n")
            elif type == "AWS::IAM::VirtualMFADevice": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IVS::Channel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IVS::PlaybackKeyPair": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IVS::RecordingConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IVS::StreamKey": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IVSChat::LoggingConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IVSChat::Room": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IdentityStore::Group": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IdentityStore::GroupMembership": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ImageBuilder::Component": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ImageBuilder::ContainerRecipe": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ImageBuilder::DistributionConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ImageBuilder::Image": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ImageBuilder::ImagePipeline": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ImageBuilder::ImageRecipe": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ImageBuilder::InfrastructureConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ImageBuilder::LifecyclePolicy": common.call_resource("aws_null", type+" "+pid)       
            elif type == "AWS::ImageBuilder::Workflow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Inspector::AssessmentTarget": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Inspector::AssessmentTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Inspector::ResourceGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::InspectorV2::Filter": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::InternetMonitor::Monitor": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT1Click::Device": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT1Click::Placement": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT1Click::Project": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::AccountAuditConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::Authorizer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::BillingGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::CACertificate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::Certificate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::CertificateProvider": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::CustomMetric": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::Dimension": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::DomainConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::FleetMetric": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::JobTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::Logging": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::MitigationAction": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::Policy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::PolicyPrincipalAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::ProvisioningTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::ResourceSpecificLogging": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::RoleAlias": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::ScheduledAudit": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::SecurityProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::SoftwarePackage": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::SoftwarePackageVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::Thing": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::ThingGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::ThingPrincipalAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::ThingType": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::TopicRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoT::TopicRuleDestination": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTAnalytics::Channel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTAnalytics::Dataset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTAnalytics::Datastore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTAnalytics::Pipeline": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTCoreDeviceAdvisor::SuiteDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTEvents::AlarmModel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTEvents::DetectorModel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTEvents::Input": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTFleetHub::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTSiteWise::AccessPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTSiteWise::Asset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTSiteWise::AssetModel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTSiteWise::Dashboard": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTSiteWise::Gateway": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTSiteWise::Portal": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTSiteWise::Project": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTThingsGraph::FlowTemplate": common.call_resource("aws_null", type+" "+pid)        
            elif type == "AWS::IoTTwinMaker::ComponentType": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTTwinMaker::Entity": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTTwinMaker::Scene": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTTwinMaker::SyncJob": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTTwinMaker::Workspace": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::Destination": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::DeviceProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::FuotaTask": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::MulticastGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::NetworkAnalyzerConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::ServiceProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::TaskDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::WirelessDevice": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::IoTWireless::WirelessGateway": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KMS::ReplicaKey": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KafkaConnect::Connector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Kendra::DataSource": f3.write(type+" "+pid+" fetched as part of Kendra Index ..\n")
            elif type == "AWS::Kendra::Faq": f3.write(type+" "+pid+" fetched as part of Kendra Index ..\n")
            elif type == "AWS::Kendra::Index": common.call_resource("aws_kendra_index", pid)
            elif type == "AWS::KendraRanking::ExecutionPlan": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Kinesis::StreamConsumer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisAnalytics::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisAnalytics::ApplicationOutput": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisAnalytics::ApplicationReferenceDataSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisAnalyticsV2::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisAnalyticsV2::ApplicationOutput": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisVideo::SignalingChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::KinesisVideo::Stream": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::LakeFormation::DataCellsFilter": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::LakeFormation::Tag": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::LakeFormation::TagAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lambda::Alias": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lambda::CodeSigningConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lambda::LayerVersionPermission": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lambda::Url": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lambda::Version": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lex::Bot": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lex::BotAlias": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lex::BotVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lex::ResourcePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::LicenseManager::Grant": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::LicenseManager::License": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::Alarm": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::Bucket": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::Certificate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::Container": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::Database": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::Disk": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::Instance": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::LoadBalancer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::LoadBalancerTlsCertificate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Lightsail::StaticIp": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Location::APIKey": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Location::GeofenceCollection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Location::Map": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Location::PlaceIndex": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Location::RouteCalculator": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Location::Tracker": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Location::TrackerConsumer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::AccountPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::Delivery": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::DeliveryDestination": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::DeliverySource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::Destination": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::LogAnomalyDetector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::LogStream": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::LogStream": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::MetricFilter": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::QueryDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::ResourcePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Logs::SubscriptionFilter": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::LookoutMetrics::Alert": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::LookoutMetrics::AnomalyDetector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::LookoutVision::Project": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::M2::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::M2::Environment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MSK::BatchScramSecret": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MSK::Cluster": common.call_resource("aws_msk_cluster", parn)
            elif type == "AWS::MSK::ClusterPolicy": f3.write(type+" "+pid+" fetched as part of aws_msk_cluster..\n")
            elif type == "AWS::MSK::Configuration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MSK::Replicator": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MSK::ServerlessCluster": common.call_resource("aws_msk_serverless_cluster", parn)
            elif type == "AWS::MSK::VpcConnection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MWAA::Environment": common.call_resource("aws_mwaa_environment", pid)
            elif type == "AWS::Macie::AllowList": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Macie::CustomDataIdentifier": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Macie::FindingsFilter": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Macie::Session": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ManagedBlockchain::Member": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::Bridge": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::BridgeOutput": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::BridgeSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::Flow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::FlowEntitlement": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::FlowOutput": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::FlowSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::FlowVpcInterface": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConnect::Gateway": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConvert::JobTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConvert::Preset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaConvert::Queue": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaLive::Channel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaLive::Input": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaLive::InputSecurityGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaLive::Multiplex": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaLive::Multiplexprogram": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackage::Asset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackage::Channel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackage::OriginEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackage::PackagingConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackage::PackagingGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackageV2::Channel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackageV2::ChannelGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackageV2::ChannelPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackageV2::OriginEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaPackageV2::OriginEndpointPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaStore::Container": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaTailor::Channel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaTailor::ChannelPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaTailor::LiveSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaTailor::PlaybackConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaTailor::SourceLocation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MediaTailor::VodSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MemoryDB::ACL": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MemoryDB::Cluster": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MemoryDB::ParameterGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MemoryDB::SubnetGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::MemoryDB::User": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Neptune::DBCluster": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Neptune::DBClusterParameterGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Neptune::DBInstance": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Neptune::DBParameterGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Neptune::DBSubnetGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NeptuneGraph::Graph": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NeptuneGraph::PrivateGraphEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkFirewall::Firewall": common.call_resource("aws_networkfirewall_firewall", pid)
            elif type == "AWS::NetworkFirewall::FirewallPolicy": common.call_resource("aws_networkfirewall_firewall_policy",pid)
            elif type == "AWS::NetworkFirewall::LoggingConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkFirewall::RuleGroup": common.call_resource("aws_null", type+" "+parn)
            elif type == "AWS::NetworkFirewall::TLSInspectionConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::ConnectAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::ConnectPeer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::CoreNetwork": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::CustomerGatewayAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::Device": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::GlobalNetwork": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::Link": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::LinkAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::Site": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::SiteToSiteVpnAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::TransitGatewayPeering": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::TransitGatewayRegistration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::TransitGatewayRouteTableAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NetworkManager::VpcAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NimbleStudio::LaunchProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NimbleStudio::StreamingImage": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NimbleStudio::Studio": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::NimbleStudio::StudioComponent": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OSIS::Pipeline": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Oam::Link": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Oam::Sink": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Omics::AnnotationStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Omics::ReferenceStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Omics::RunGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Omics::SequenceStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Omics::VariantStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Omics::Workflow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpenSearchServerless::AccessPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpenSearchServerless::Collection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpenSearchServerless::LifecyclePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpenSearchServerless::SecurityConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpenSearchServerless::SecurityPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpenSearchServerless::VpcEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpenSearchService::Domain": common.call_resource("aws_opensearch_domain", pid)
            elif type == "AWS::OpsWorks::App": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpsWorks::ElasticLoadBalancerAttachment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpsWorks::Instance": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpsWorks::Layer": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpsWorks::Stack": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpsWorks::UserProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpsWorks::Volume": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::OpsWorksCM::Server": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Organizations::Account": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Organizations::Organization": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Organizations::OrganizationalUnit": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Organizations::Policy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Organizations::ResourcePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PCAConnectorAD::Connector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PCAConnectorAD::DirectoryRegistration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PCAConnectorAD::ServicePrincipalName": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PCAConnectorAD::Template": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PCAConnectorAD::TemplateGroupAccessControlEntry": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Panorama::ApplicationInstance": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Panorama::Package": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Panorama::PackageVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Personalize::Dataset": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Personalize::DatasetGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Personalize::Schema": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Personalize::Solution": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::ADMChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::APNSChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::APNSSandboxChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::APNSVoipChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::APNSVoipSandboxChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::App": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::ApplicationSettings": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::BaiduChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::Campaign": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::EmailChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::EmailTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::EventStream": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::GCMChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::InAppTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::PushTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::SMSChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::Segment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::SmsTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pinpoint::VoiceChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PinpointEmail::ConfigurationSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PinpointEmail::ConfigurationSetEventDestination": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PinpointEmail::DedicatedIpPool": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::PinpointEmail::Identity": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Pipes::Pipe": common.call_resource("aws_pipes_pipe", pid)
            elif type == "AWS::Proton::EnvironmentAccountConnection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Proton::EnvironmentTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Proton::ServiceTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QLDB::Ledger": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QLDB::Stream": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::Analysis": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::Dashboard": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::DataSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::DataSource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::RefreshSchedule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::Template": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::Theme": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::Topic": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::QuickSight::VPCConnection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RAM::Permission": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RAM::ResourceShare": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RDS::CustomDBEngineVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RDS::DBProxy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RDS::DBProxyEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RDS::DBProxyTargetGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RDS::DBSecurityGroup": common.call_resource("aws_security_group", pid)
            elif type == "AWS::RDS::DBSecurityGroupIngress": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RDS::GlobalCluster": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RDS::OptionGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RUM::AppMonitor": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Redshift::ClusterSecurityGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Redshift::ClusterSecurityGroupIngress": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Redshift::EndpointAccess": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Redshift::EndpointAuthorization": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Redshift::EventSubscription": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Redshift::ScheduledAction": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RefactorSpaces::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RefactorSpaces::Environment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RefactorSpaces::Route": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RefactorSpaces::Service": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Rekognition::Collection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Rekognition::Project": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Rekognition::StreamProcessor": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ResilienceHub::App": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ResilienceHub::ResiliencyPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ResourceExplorer2::DefaultViewAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ResourceExplorer2::Index": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ResourceExplorer2::View": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ResourceGroups::Group": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RoboMaker::Fleet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RoboMaker::Robot": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RoboMaker::RobotApplication": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RoboMaker::RobotApplicationVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RoboMaker::SimulationApplication": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RoboMaker::SimulationApplicationVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RolesAnywhere::CRL": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RolesAnywhere::Profile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::RolesAnywhere::TrustAnchor": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53::CidrCollection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53::DNSSEC": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53::HealthCheck": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53::HostedZone": common.call_resource("aws_route53_zone", pid)
            elif type == "AWS::Route53::KeySigningKey": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53::RecordSet": f3.write(type+" "+pid+" fetched as part of Route53 HostedZone..\n") 
            elif type == "AWS::Route53::RecordSetGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53RecoveryControl::Cluster": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53RecoveryControl::ControlPanel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53RecoveryControl::RoutingControl": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53RecoveryControl::SafetyRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53RecoveryReadiness::Cell": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53RecoveryReadiness::ReadinessCheck": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53RecoveryReadiness::RecoveryGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53RecoveryReadiness::ResourceSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::FirewallDomainList": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::FirewallRuleGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::FirewallRuleGroupAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::OutpostResolver": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::ResolverConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::ResolverDNSSECConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::ResolverEndpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::ResolverQueryLoggingConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::ResolverRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Route53Resolver::ResolverRuleAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::S3Express::BucketPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::S3Express::DirectoryBucket": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::S3ObjectLambda::AccessPoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::S3ObjectLambda::AccessPointPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::S3Outposts::AccessPoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::S3Outposts::Bucket": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::S3Outposts::BucketPolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::S3Outposts::Endpoint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SDB::Domain": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::ConfigurationSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::ConfigurationSetEventDestination": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::ContactList": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::DedicatedIpPool": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::EmailIdentity": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::ReceiptFilter": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::ReceiptRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::ReceiptRuleSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::Template": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SES::VdmAttributes": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SNS::TopicInlinePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SQS::QueueInlinePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSM::Association": common.call_resource("aws_ssm_association", pid)
            elif type == "AWS::SSM::Document": common.call_resource("aws_ssm_document", pid)
            elif type == "AWS::SSM::MaintenanceWindow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSM::MaintenanceWindowTarget": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSM::MaintenanceWindowTask": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSM::PatchBaseline": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSM::ResourceDataSync": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSM::ResourcePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSMContacts::Contact": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSMContacts::ContactChannel": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSMContacts::Plan": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSMContacts::Rotation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSMIncidents::ReplicationSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSMIncidents::ResponsePlan": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSO::Assignment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSO::InstanceAccessControlAttributeConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SSO::PermissionSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::CodeRepository": common.call_resource("aws_sagemaker_code_repository", pid)
            elif type == "AWS::SageMaker::DataQualityJobDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::Device": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::DeviceFleet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::Endpoint": common.call_resource("aws_sagemaker_endpoint", pid)
            elif type == "AWS::SageMaker::EndpointConfig": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::FeatureGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::InferenceComponent": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::InferenceExperiment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::Model": common.call_resource("aws_sagemaker_model", pid)
            elif type == "AWS::SageMaker::ModelBiasJobDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::ModelCard": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::ModelExplainabilityJobDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::ModelPackage": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::ModelPackageGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::ModelQualityJobDefinition": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::MonitoringSchedule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SageMaker::NotebookInstanceLifecycleConfig": common.call_resource("aws_sagemaker_notebook_instance_lifecycle_configuration", pid)
            elif type == "AWS::SageMaker::Pipeline": common.call_resource("aws_sagemaker_pipeline", pid)
            elif type == "AWS::SageMaker::Project": common.call_resource("aws_sagemaker_project", pid)
            elif type == "AWS::SageMaker::Space": common.call_resource("aws_sagemaker_space", pid)
            elif type == "AWS::SageMaker::Workteam": common.call_resource("aws_sagemaker_workteam", pid)
            elif type == "AWS::Scheduler::Schedule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Scheduler::ScheduleGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SecretsManager::ResourcePolicy": common.call_resource("aws_secretsmanager_secret_policy", pid)
            elif type == "AWS::SecretsManager::RotationSchedule": common.call_resource("aws_secretsmanager_secret_rotation",pid)
            elif type == "AWS::SecurityHub::AutomationRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SecurityHub::Hub": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SecurityHub::Standard": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::AcceptedPortfolioShare": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::CloudFormationProduct": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::CloudFormationProvisionedProduct": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::LaunchNotificationConstraint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::LaunchRoleConstraint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::LaunchTemplateConstraint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::PortfolioProductAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::Portfolio": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::PortfolioShare": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::ResourceUpdateConstraint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::ServiceAction": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::ServiceActionAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::StackSetConstraint": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::TagOption": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalog::TagOptionAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalogAppRegistry::Application": common.call_resource("aws_null", type+" "+pid)  
            elif type == "AWS::ServiceCatalogAppRegistry::AttributeGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceCatalogAppRegistry::ResourceAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceDiscovery::HttpNamespace": common.call_resource("aws_service_discovery_http_namespace", pid)
            elif type == "AWS::ServiceDiscovery::Instance": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::ServiceDiscovery::PublicDnsNamespace": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Shield::DRTAccess": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Shield::ProactiveEngagement": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Shield::Protection": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Shield::ProtectionGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Signer::ProfilePermission": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Signer::SigningProfile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SimSpaceWeaver::Simulation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::StepFunctions::Activity": common.call_resource("aws_sfn_activity", pid)
            elif type == "AWS::StepFunctions::StateMachineAlias": common.call_resource("aws_sfn_alias", pid)
            elif type == "AWS::StepFunctions::StateMachineVersion": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SupportApp::AccountAlias": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SupportApp::SlackChannelConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SupportApp::SlackWorkspaceConfiguration": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Synthetics::Canary": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Synthetics::Group": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::SystemsManagerSAP::Application": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Timestream::Database": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Timestream::ScheduledQuery": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Timestream::Table": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Transfer::Agreement": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Transfer::Certificate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Transfer::Connector": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Transfer::Profile": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Transfer::Server": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Transfer::User": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Transfer::Workflow": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::VerifiedPermissions::IdentitySource": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::VerifiedPermissions::Policy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::VerifiedPermissions::PolicyStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::VerifiedPermissions::PolicyTemplate": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::VoiceID::Domain": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::VpcLattice::AccessLogSubscription": common.call_resource("aws_vpclattice_access_log_subscription", pid)
            elif type == "AWS::VpcLattice::AuthPolicy": common.call_resource("aws_vpclattice_auth_policy", pid)
            elif type == "AWS::VpcLattice::Listener": common.call_resource("aws_vpclattice_listener", pid)
            elif type == "AWS::VpcLattice::ResourcePolicy": common.call_resource("aws_vpclattice_resource_policy", pid)
            elif type == "AWS::VpcLattice::Rule": common.call_resource("aws_vpclattice_listener_rule", pid)
            elif type == "AWS::VpcLattice::Service": common.call_resource("aws_vpclattice_service", pid)
            elif type == "AWS::VpcLattice::ServiceNetwork": common.call_resource("aws_vpclattice_service_network", pid)
            elif type == "AWS::VpcLattice::ServiceNetworkServiceAssociation": common.call_resource("aws_vpclattice_service_network_service_association", pid)
            elif type == "AWS::VpcLattice::ServiceNetworkVpcAssociation": common.call_resource("aws_vpclattice_service_network_vpc_association", pid)
            elif type == "AWS::VpcLattice::TargetGroup": common.call_resource("aws_vpclattice_target_group", pid)
            elif type == "AWS::WAF::ByteMatchSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAF::IPSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAF::Rule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAF::SizeConstraintSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAF::SqlInjectionMatchSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAF::WebACL": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAF::XssMatchSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::ByteMatchSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::GeoMatchSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::IPSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::RateBasedRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::RegexPatternSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::Rule": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::SizeConstraintSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::SqlInjectionMatchSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::WebACL": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::WebACLAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFRegional::XssMatchSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFv2::IPSet": common.call_resource("aws_wafv2_ip_set", pid)
            elif type == "AWS::WAFv2::LoggingConfiguration": f3.write(type+" "+pid+" fetched as part of wafv2_web__acl..\n") 
            elif type == "AWS::WAFv2::RegexPatternSet": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFv2::RuleGroup": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WAFv2::WebACL": common.call_resource("aws_wafv2_web_acl", pid)
            elif type == "AWS::WAFv2::WebACLAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Wisdom::Assistant": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Wisdom::AssistantAssociation": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::Wisdom::KnowledgeBase": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpaces::ConnectionAlias": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpaces::Workspace": common.call_resource("aws_workspaces_workspace", pid)
            elif type == "AWS::WorkSpacesThinClient::Environment": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpacesWeb::BrowserSettings": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpacesWeb::IdentityProvider": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpacesWeb::IpAccessSettings": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpacesWeb::NetworkSettings": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpacesWeb::Portal": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpacesWeb::TrustStore": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpacesWeb::UserAccessLoggingSettings": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::WorkSpacesWeb::UserSettings": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::XRay::Group": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::XRay::ResourcePolicy": common.call_resource("aws_null", type+" "+pid)
            elif type == "AWS::XRay::SamplingRule": common.call_resource("aws_null", type+" "+pid)
            elif type == "": common.call_resource("aws_null", type+" "+pid)      
# END AUTOGEN           
            elif "Custom::" in type: 
                f3.write(type +" fetched as Lambda function ..."+ pid +"\n")
            else:
                print("--UNPROCESSED-- "+type + " "+ pid +" "+ parn)
                with open('stack-unprocessed.err', 'a') as f:
                    f.write("--UNPROCESSED-- "+type + " "+ pid +" "+ parn+" \n")

    f3.close()
    f4.close()
    f5.close()
## Plan it so Terraform not overwhealmed ?
    #common.tfplan1()
    #common.tfplan2()

    return




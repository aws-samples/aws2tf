#!/usr/bin/env python3
"""
Demonstrate the real directory structure creation for aws2tf.
"""

import sys
import os
from pathlib import Path

# Add the code directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'code'))

from config import create_test_config


def create_real_directory_structure():
    """Create actual directory structure to demonstrate the format."""
    print("Creating Real AWS2TF Directory Structure")
    print("=" * 50)
    
    # Test different scenarios
    scenarios = [
        {
            'account_id': '123456789012',
            'region': 'us-east-1',
            'prefix': None,
            'description': 'Default VPC import'
        },
        {
            'account_id': '123456789012', 
            'region': 'us-west-2',
            'prefix': 'networking',
            'description': 'Networking resources with prefix'
        },
        {
            'account_id': '987654321098',
            'region': 'eu-west-1', 
            'prefix': 'production',
            'description': 'Production environment'
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{i}. {scenario['description']}")
        
        # Build directory path
        prefix_part = f"{scenario['prefix']}-" if scenario['prefix'] else ""
        dir_name = f"tf-{prefix_part}{scenario['account_id']}-{scenario['region']}"
        output_dir = Path(f"generated/{dir_name}")
        
        print(f"   Directory: {output_dir}")
        
        # Create directory structure
        output_dir.mkdir(parents=True, exist_ok=True)
        imported_dir = output_dir / "imported"
        imported_dir.mkdir(exist_ok=True)
        
        # Create terraform files
        terraform_files = {
            'main.tf': f'''# Main terraform configuration
# Generated for {scenario['description']}
# Account: {scenario['account_id']}
# Region: {scenario['region']}

terraform {{
  required_version = ">= 1.0"
  required_providers {{
    aws = {{
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }}
  }}
}}

provider "aws" {{
  region = "{scenario['region']}"
}}
''',
            'variables.tf': f'''# Variables for {scenario['description']}

variable "region" {{
  description = "AWS region"
  type        = string
  default     = "{scenario['region']}"
}}

variable "account_id" {{
  description = "AWS account ID"
  type        = string
  default     = "{scenario['account_id']}"
}}
''',
            'outputs.tf': f'''# Outputs for {scenario['description']}

output "account_id" {{
  description = "AWS account ID"
  value       = var.account_id
}}

output "region" {{
  description = "AWS region"
  value       = var.region
}}
''',
            'providers.tf': f'''# Provider configuration for {scenario['description']}

terraform {{
  required_providers {{
    aws = {{
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }}
  }}
}}
'''
        }
        
        # Write files
        for filename, content in terraform_files.items():
            file_path = output_dir / filename
            file_path.write_text(content)
            print(f"   ✓ Created {filename}")
        
        # Create import script
        import_script = output_dir / "import.sh"
        import_script.write_text(f'''#!/bin/bash
# Import script for {scenario['description']}
# Generated by aws2tf v2.0

echo "Importing AWS resources for {scenario['description']}"
echo "Account: {scenario['account_id']}"
echo "Region: {scenario['region']}"

# Example import commands would go here
# terraform import aws_vpc.main vpc-12345
# terraform import aws_subnet.public subnet-67890

echo "Import completed"
''')
        import_script.chmod(0o755)
        print(f"   ✓ Created import.sh")
        
        # Create README
        readme = output_dir / "README.md"
        readme.write_text(f'''# {scenario['description']}

Generated by aws2tf v2.0 with workflow orchestrator

## Configuration

- **AWS Account**: {scenario['account_id']}
- **AWS Region**: {scenario['region']}
- **Output Directory**: {output_dir}

## Files

- `main.tf` - Main terraform configuration
- `variables.tf` - Input variables
- `outputs.tf` - Output values
- `providers.tf` - Provider configuration
- `import.sh` - Import script for existing resources
- `imported/` - Directory for imported resource configurations

## Usage

1. Review the terraform configuration files
2. Run `terraform init` to initialize
3. Run `terraform plan` to see planned changes
4. Run `./import.sh` to import existing resources
5. Run `terraform apply` to manage infrastructure

## Generated by

aws2tf v2.0 - Infrastructure Import Tool with Workflow Orchestrator
''')
        print(f"   ✓ Created README.md")
        
        print(f"   ✓ Directory structure created with {len(terraform_files) + 2} files")


def show_directory_tree():
    """Show the created directory tree."""
    print(f"\nGenerated Directory Structure:")
    print("=" * 40)
    
    generated_dir = Path("generated")
    if not generated_dir.exists():
        print("No generated directories found")
        return
    
    def print_tree(path: Path, prefix: str = ""):
        """Recursively print directory tree."""
        items = sorted(path.iterdir())
        for i, item in enumerate(items):
            is_last = i == len(items) - 1
            current_prefix = "└── " if is_last else "├── "
            print(f"{prefix}{current_prefix}{item.name}")
            
            if item.is_dir():
                next_prefix = prefix + ("    " if is_last else "│   ")
                print_tree(item, next_prefix)
    
    print("generated/")
    print_tree(generated_dir, "")


def main():
    """Main function."""
    try:
        create_real_directory_structure()
        show_directory_tree()
        
        print(f"\n" + "=" * 50)
        print("DIRECTORY STRUCTURE DEMONSTRATION COMPLETE!")
        print("=" * 50)
        
        print(f"\nDirectory Format Summary:")
        print(f"✓ Default: generated/tf-{{account}}-{{region}}/")
        print(f"✓ With prefix: generated/tf-{{prefix}}-{{account}}-{{region}}/")
        print(f"✓ Includes imported/ subdirectory")
        print(f"✓ Contains all necessary terraform files")
        print(f"✓ Includes import script and documentation")
        
        print(f"\nThe new aws2tf creates the same directory structure as the original!")
        
        # Show example commands
        print(f"\nExample Commands:")
        print(f"  aws2tf vpc vpc-12345                    # → generated/tf-123456789012-us-east-1/")
        print(f"  aws2tf subnet subnet-67890 -o network  # → generated/tf-network-123456789012-us-east-1/")
        print(f"  aws2tf instance i-abc123 --region us-west-2  # → generated/tf-123456789012-us-west-2/")
        
    except Exception as e:
        print(f"Demo failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()